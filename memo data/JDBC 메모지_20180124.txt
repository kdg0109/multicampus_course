JDBC 
- JDBC 드라이버 위치
C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib
- ojdbc6 사용 C:\oraclexe에 복사

---------1일차---------------
Class.forName("oracle.jdbc.driver.OracleDriver");
			Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "jdbctest", "jdbctest");
conn.close() 
======= 환경 설정 ======
- 어떤 DB를 연결하든 JDBC의 api는 같다.
- 대신 각 DB에 맞는 JDBC 드라이버 설치해줘야 함
- 빌드설정은 properties의 libraries에서 add External JARs 에서 드라이버 apply
===== 환경 설정 끝 =====
- JDBC 대부분 API가 인터페이스
따라서 JDBC 드라이버 안에 있는 자식 클래스를 통하여 API를 접근해야함
- Statement 인터페이스의 메소드들은 쿼리를 수행함 ex) executeQuery()가 select만 날림
나머지는 executeUpdate()

JDBC 기술의 구성
JDBC API(java.sql, javax.sql) -> 공통적 (모든 DB 서버에 대해)
JDBC Driver -> DB 서버마다 달라진다.

인터페이스
- Connection : DB 서버 접속했을 때
받아 사용하는 객체
- PreparedStatement
- ResultSet : select의 리턴되는 값이 있든 없든 리턴

클래스
DriverManager : DB 서버 접속
Timestamp : 날짜와 시간을 공통 처리

< JDBC 프로그래밍 절차 >
1. Driver 등록
2. DBMS와 연결(DB 서버 접속)
3. Statement 생성
4. SQL 전송
5. 결과 받기
6. 닫기 (접속상태 해제)

getConnection을 호출하면 자식객체(Connection)를 찾아서 리턴

- Class.forName이 JVM에 클래스를 로딩하도록 함
- Connection, Statement 자체를 객체 생성하지 못함. 그래서 메서드를 통해 접근해야함
여러 DB에서 접근하기 용이하게 설계

DB에서 int, float 보다 number 형으로 만드는게 좋다 number가 공통적임

insert한 다음 commit을 해줘야하는데 JDBC는 default로 자동 commit이다.

- ResultSet rs는 처음 위치가 첫 값 바로 전이기에 사용하려면  rs.next부터 해야함.
다음 행이 없으면 rs.next()는 false;
- select된 것이 없다면, rs는 빈 객체가 호출된다. 따라서, rs.next()는 false

PreparedStatement stmt = conn.prepareStatement("insert into product values(?,?,?,?,?)");
- statement와 다르게 미리 sql문을 등록해 놓는다. 사용될 데이터값은 나중에 설정한다는 의미로 ? 넣어줌

---------2일차---------------
[ SQL 명령을 수행시키는 기능의 API ]
★★1. Statement : 
	- 정적으로 구성되는 SQL 명령 수행
	- 수행하려는 SQL 명령을 다양하게 지정할 수 있다.
	- 장점 : 객체 하나로 명령을 다양하게 할 수 있다.

★★2. PreparedStatement :
	- 동적으로 구성되는 SQL 명령 수행
	- FileInputSteam 이용하면 file을 읽어서 뿌려줄 수가 있음
	- 동일한 SQL 명령을 사용되는 데이터 값만 변경하여 반복 수행시 유리
	- 문자열로 표현할 수 없는 데이터 타입도 처리 가능 ex) 이미지, 오디오 파일 등등
	- 객체 생성시 초기화된 SQL 명령만 수행 가능. 한번에 하나의 sql만 가능 또 사용하려면 다시 만들어아함

3. CallableStatement :
	- 스토아드 프로시져와 같은 SQL 명령들을 하나의 모듈로 구성하여 호출하는 방식으로 SQL 명령들을 수행할 때 사용되는 API
(여러개의 SQL을 하나의 함수처럼 만들어놔)

conn.setAutoCommit(false);
- 자동 커밋 해제

- executeUpdate를 통한 Delete, Update는 리턴 값이 수정된 레코드 수의 int 형이 리턴된다. 그렇기에 필요에 따라 변수에 담아도 된다.

자바의 프로그램 아규먼트로 args를 전달하는데 띄어쓰기가 존재할 경우, 인용부호로 묶는다.
ex) args[0] = "오늘은 좋은 날씨"

- sysdate는 오라클에서만 사용하기에 자바에서 아래와 같은 함수로 date를 처리한다.
pstmt.setDate(2, new java.sql.Date(new java.util.Date().getTile())
Date() 함수가 이름이 같기에 
- java.sql.*
	- Timestamp : 날짜 + 시간 정보
	- date : 날짜만
	- time : 시간만
setDate, setTime, setTimestamp 도 수정

- 자바 : MM 월, mm 분
- 오라클 : mm 월, mi 분

- blob 사진, 파일 들을 바이너리로 저장할 수 있음 	binary large object 타입으로서 최대 4G

- Scanner는 지역변수에서 close를 하면 모든 scanner가 close되는 현상이 일어남

- nextLine 특성 : 입력 버퍼 안에 개행이 있다면 개행만 읽어버림
- 스크롤이 가능한 resultset을 만들 수 있음
- Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
- 아규먼트를 준다는건 드라이버에 데이터를 보관한다는 뜻. 그래서 앞뒤로 접근가능
- 그래서 arraylist같은거 안만들어도 앞뒤로 움직이기 가능
- last()를 포인트하고 getRaw()하면 그 행의 갯수를 알 수 있게 됨. 그렇게 해서 몇 개있는지 카운터없이 바로 알수 있음
- absolute(숫자) : 바로 행 위치 이동함 시작이 1임

create sequence 시퀀스이름 start with 1 increment by 1;
시퀀스 : 유일한 숫자값을 제공하는 기능의 오라클 객체(테이블 객체, 뷰 객체 등등)를 (start)1부터 (increment)1씩 증가시켜라
- 유니크한 값을 만들어내는 방법.

picture_seq.nextval  할 때마다 다음값 다음값 더해줌

picture_seq.currval 현재 값을 줘

group by에는 열명만 온다
이 때 select에는 집약함수, group by에 사용한 열, 상수가 가능하고,
having은 select와 같은 성격을 지닌다.

rr 00~49 2000년도
50~99 1900년도
yy 무조건 2000년도

경로 팁
../text.txt 상위 디렉토리
./text.txt 현재 디렉토리