random.order = F,
color = pal,
#scale=c(15, 0.3),
scale=c(12, 1),
rot.per = 0.1);                      #글자의 로테이션 빈도수
print(p);
dev.off();
library(memoise)
library(rJava)
library(KoNLP)
library(dplyr)
library(stringr) #특수문자 제거
library(wordcloud)
library(RColorBrewer) #좀더 다양한 색상 추가
useNIADic();
txt <- readLines('dragon');
#txt <- readLines('KakaoTalkChats.txt');
#txt <- readLines('http://news.naver.com/main/read.nhn?mode=LPOD&mid=sec&oid=001&aid=0010000299&isYeonhapFlash=Y&rc=N');
txt <- gsub('\\W', ' ', txt);                #특수문자를 제거하시오
txt <- gsub('\\^', ' ', txt);         #특수문자를 제거하시오
txt <- gsub('^ㅋ', ' ', txt);         #특수문자를 제거하시오
txt <- gsub('[a-z]', ' ', txt);
txt <- gsub('[A-Z]', ' ', txt);
noun <- extractNoun(txt);                   #명사만 추출
vc <- unlist(noun)                          #list 형을 vector로 바꾸기
wc <- table(vc)
wf <- as.data.frame(wc, stringsAsFactors = F)
#wf <- rename(wf, Var1 = vc, freq = Freq)
head(wf)
wf <- filter(wf, nchar(vc)>=2)            # 단어의 개수가 2개 이상
wf <- head(wf[order(wf$Freq, decreasing = T),], 50)
pal <- brewer.pal(8, 'Blues')[5:9];             # Dark2라는 통에서 여러 색상 가져오겠다
set.seed(1234);                             #1234 안에서의 난수를 추출해서 wordcloud모양을 바꿈
jpeg(filename = "dragon.kpg", width = 680, height = 680, quality = 100)
p = wordcloud(words = wf$vc,
freq = wf$Freq,
min.freq = 2,
max.words = 150,
random.order = F,
color = pal,
#scale=c(15, 0.3),
scale=c(12, 1),
rot.per = 0.1);                      #글자의 로테이션 빈도수
print(p);
dev.off();
txt <- readLines('dragon');
#txt <- readLines('KakaoTalkChats.txt');
#txt <- readLines('http://news.naver.com/main/read.nhn?mode=LPOD&mid=sec&oid=001&aid=0010000299&isYeonhapFlash=Y&rc=N');
txt <- gsub('\\W', ' ', txt);                #특수문자를 제거하시오
txt <- gsub('\\^', ' ', txt);         #특수문자를 제거하시오
txt <- gsub('^ㅋ', ' ', txt);         #특수문자를 제거하시오
txt <- gsub('[a-z]', ' ', txt);
txt <- gsub('[A-Z]', ' ', txt);
noun <- extractNoun(txt);                   #명사만 추출
vc <- unlist(noun)                          #list 형을 vector로 바꾸기
wc <- table(vc)
wf <- as.data.frame(wc, stringsAsFactors = F)
#wf <- rename(wf, Var1 = vc, freq = Freq)
head(wf)
wf <- filter(wf, nchar(vc)>=2)            # 단어의 개수가 2개 이상
wf <- head(wf[order(wf$Freq, decreasing = T),], 50)
pal <- brewer.pal(8, 'Blues')[5:9];             # Dark2라는 통에서 여러 색상 가져오겠다
set.seed(1234);                             #1234 안에서의 난수를 추출해서 wordcloud모양을 바꿈
jpeg(filename = "dragon.jpg", width = 680, height = 680, quality = 100)
p = wordcloud(words = wf$vc,
freq = wf$Freq,
min.freq = 2,
max.words = 150,
random.order = F,
color = pal,
#scale=c(15, 0.3),
scale=c(12, 1),
rot.per = 0.1);                      #글자의 로테이션 빈도수
print(p);
dev.off();
#txt <- readLines('kakao.txt');
#txt <- readLines('haha.txt');
txt <- readLines('dragon.txt');
#txt <- readLines('KakaoTalkChats.txt');
#txt <- readLines('http://news.naver.com/main/read.nhn?mode=LPOD&mid=sec&oid=001&aid=0010000299&isYeonhapFlash=Y&rc=N');
txt <- gsub('\\W', ' ', txt);                #특수문자를 제거하시오
txt <- gsub('\\^', ' ', txt);         #특수문자를 제거하시오
txt <- gsub('^ㅋ', ' ', txt);         #특수문자를 제거하시오
txt <- gsub('[a-z]', ' ', txt);
txt <- gsub('[A-Z]', ' ', txt);
noun <- extractNoun(txt);                   #명사만 추출
vc <- unlist(noun)                          #list 형을 vector로 바꾸기
wc <- table(vc)
wf <- as.data.frame(wc, stringsAsFactors = F)
#wf <- rename(wf, Var1 = vc, freq = Freq)
head(wf)
wf <- filter(wf, nchar(vc)>=2)            # 단어의 개수가 2개 이상
wf <- head(wf[order(wf$Freq, decreasing = T),], 50)
pal <- brewer.pal(8, 'Blues')[5:9];             # Dark2라는 통에서 여러 색상 가져오겠다
set.seed(1234);                             #1234 안에서의 난수를 추출해서 wordcloud모양을 바꿈
jpeg(filename = "dragon.jpg", width = 680, height = 680, quality = 100)
p = wordcloud(words = wf$vc,
freq = wf$Freq,
min.freq = 2,
max.words = 150,
random.order = F,
color = pal,
#scale=c(15, 0.3),
scale=c(12, 1),
rot.per = 0.1);                      #글자의 로테이션 빈도수
print(p);
dev.off();
source('C:/rproject/day07/r1.R', encoding = 'UTF-8', echo=TRUE)
library(memoise)
library(rJava)
library(KoNLP)
library(dplyr)
library(stringr) #특수문자 제거
library(wordcloud)
library(RColorBrewer) #좀더 다양한 색상 추가
useNIADic();
txt <- readLines('dragon.txt');
#txt <- readLines('KakaoTalkChats.txt');
#txt <- readLines('http://news.naver.com/main/read.nhn?mode=LPOD&mid=sec&oid=001&aid=0010000299&isYeonhapFlash=Y&rc=N');
txt <- gsub('\\W', ' ', txt);                #특수문자를 제거하시오
txt <- gsub('\\^', ' ', txt);         #특수문자를 제거하시오
txt <- gsub('^ㅋ', ' ', txt);         #특수문자를 제거하시오
txt <- gsub('[a-z]', ' ', txt);
txt <- gsub('[A-Z]', ' ', txt);
noun <- extractNoun(txt);                   #명사만 추출
vc <- unlist(noun)                          #list 형을 vector로 바꾸기
wc <- table(vc)
wf <- as.data.frame(wc, stringsAsFactors = F)
#wf <- rename(wf, Var1 = vc, freq = Freq)
head(wf)
wf <- filter(wf, nchar(vc)>=2)            # 단어의 개수가 2개 이상
wf <- head(wf[order(wf$Freq, decreasing = T),], 50)
pal <- brewer.pal(8, 'Blues')[5:9];             # Dark2라는 통에서 여러 색상 가져오겠다
set.seed(1234);                             #1234 안에서의 난수를 추출해서 wordcloud모양을 바꿈
jpeg(filename = "dragon.jpg", width = 680, height = 680, quality = 100)
p = wordcloud(words = wf$vc,
freq = wf$Freq,
min.freq = 2,
max.words = 150,
random.order = F,
color = pal,
#scale=c(15, 0.3),
scale=c(12, 1),
rot.per = 0.1);                      #글자의 로테이션 빈도수
print(p);
dev.off();
#txt <- readLines('hiphop.txt');
#txt <- readLines('kakao.txt');
#txt <- readLines('haha.txt');
txt <- readLines('dragon.txt');
#txt <- readLines('KakaoTalkChats.txt');
#txt <- readLines('http://news.naver.com/main/read.nhn?mode=LPOD&mid=sec&oid=001&aid=0010000299&isYeonhapFlash=Y&rc=N');
txt <- gsub('\\W', ' ', txt);                #특수문자를 제거하시오
txt <- gsub('\\^', ' ', txt);         #특수문자를 제거하시오
txt <- gsub('^ㅋ', ' ', txt);         #특수문자를 제거하시오
txt <- gsub('[a-z]', ' ', txt);
txt <- gsub('[A-Z]', ' ', txt);
noun <- extractNoun(txt);                   #명사만 추출
vc <- unlist(noun)                          #list 형을 vector로 바꾸기
wc <- table(vc)
wf <- as.data.frame(wc, stringsAsFactors = F)
#wf <- rename(wf, Var1 = vc, freq = Freq)
head(wf)
wf <- filter(wf, nchar(vc)>=2)            # 단어의 개수가 2개 이상
wf <- head(wf[order(wf$Freq, decreasing = T),], 80)
pal <- brewer.pal(8, 'Blues')[5:9];             # Dark2라는 통에서 여러 색상 가져오겠다
set.seed(1234);                             #1234 안에서의 난수를 추출해서 wordcloud모양을 바꿈
jpeg(filename = "dragon.jpg", width = 680, height = 680, quality = 100)
p = wordcloud(words = wf$vc,
freq = wf$Freq,
min.freq = 2,
max.words = 150,
random.order = F,
color = pal,
#scale=c(15, 0.3),
scale=c(12, 1),
rot.per = 0.1);                      #글자의 로테이션 빈도수
print(p);
dev.off();
txt <- readLines('dragon.txt');
#txt <- readLines('KakaoTalkChats.txt');
#txt <- readLines('http://news.naver.com/main/read.nhn?mode=LPOD&mid=sec&oid=001&aid=0010000299&isYeonhapFlash=Y&rc=N');
txt <- gsub('\\W', ' ', txt);                #특수문자를 제거하시오
txt <- gsub('\\^', ' ', txt);         #특수문자를 제거하시오
txt <- gsub('^ㅋ', ' ', txt);         #특수문자를 제거하시오
txt <- gsub('[a-z]', ' ', txt);
txt <- gsub('[A-Z]', ' ', txt);
noun <- extractNoun(txt);                   #명사만 추출
vc <- unlist(noun)                          #list 형을 vector로 바꾸기
wc <- table(vc)
wf <- as.data.frame(wc, stringsAsFactors = F)
#wf <- rename(wf, Var1 = vc, freq = Freq)
head(wf)
wf <- filter(wf, nchar(vc)>=2)            # 단어의 개수가 2개 이상
wf <- head(wf[order(wf$Freq, decreasing = T),], 80)
pal <- brewer.pal(8, 'Blues')[5:9];             # Dark2라는 통에서 여러 색상 가져오겠다
set.seed(1234);                             #1234 안에서의 난수를 추출해서 wordcloud모양을 바꿈
jpeg(filename = "dragon.jpg", width = 680, height = 680, quality = 100)
p = wordcloud(words = wf$vc,
freq = wf$Freq,
min.freq = 2,
max.words = 150,
random.order = F,
color = pal,
#scale=c(15, 0.3),
scale=c(12, 1),
rot.per = 0.1);                      #글자의 로테이션 빈도수
print(p);
dev.off();
txt <- readLines('dragon.txt');
#txt <- readLines('KakaoTalkChats.txt');
#txt <- readLines('http://news.naver.com/main/read.nhn?mode=LPOD&mid=sec&oid=001&aid=0010000299&isYeonhapFlash=Y&rc=N');
txt <- gsub('\\W', ' ', txt);                #특수문자를 제거하시오
txt <- gsub('\\^', ' ', txt);         #특수문자를 제거하시오
txt <- gsub('^ㅋ', ' ', txt);         #특수문자를 제거하시오
txt <- gsub('[a-z]', ' ', txt);
txt <- gsub('[A-Z]', ' ', txt);
noun <- extractNoun(txt);                   #명사만 추출
vc <- unlist(noun)                          #list 형을 vector로 바꾸기
wc <- table(vc)
wf <- as.data.frame(wc, stringsAsFactors = F)
#wf <- rename(wf, Var1 = vc, freq = Freq)
head(wf)
wf <- filter(wf, nchar(vc)>=2)            # 단어의 개수가 2개 이상
wf <- head(wf[order(wf$Freq, decreasing = T),], 80)
pal <- brewer.pal(8, 'Blues')[5:9];             # Dark2라는 통에서 여러 색상 가져오겠다
set.seed(1234);                             #1234 안에서의 난수를 추출해서 wordcloud모양을 바꿈
jpeg(filename = "dragon.jpg", width = 680, height = 680, quality = 100)
p = wordcloud(words = wf$vc,
freq = wf$Freq,
min.freq = 2,
max.words = 150,
random.order = F,
color = pal,
#scale=c(15, 0.3),
scale=c(12, 1),
rot.per = 0.1);                      #글자의 로테이션 빈도수
print(p);
dev.off();
install.packages('ggiraphExtra')
install.packages("stringi")
install.packages("stringi")
install.packages('devtools')
devtools::install_github('cardiomoon/kormaps2014')
library(kormaps2014)
kopop1
korpop1
changeCode(korpop1)
str(changeCode(korpop1))
library(dplyr)
library(dplyr)
kormap1 <- rename(kormap1,
pop = '총인구_명',
name = '행정구역별_읍면동'
)
kormap1 <- rename(kormap1,
pop = '총인구 명',
name = '행정구역별 읍면동'
)
library(dplyr)
changeCode(korpop1)
kormap1 <- rename(kormap1,
pop = '총인구_명',
name = '행정구역별_읍면동'
)
library(dplyr)
changeCode(korpop1)
kormap1 <- rename(korpop1,
pop = '총인구_명',
name = '행정구역별_읍면동'
)
kormap1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동
)
kormap1
str(changeCode(korpop1))
kormap1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동
)
str(changeCode(korpop1))
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동
)
str(changeCode(korpop1))
ggChoropleth(data = korpop1,
aes(fill = pop,
map_id = code,
tooltip = name),
map = kormap1,
interactive = T)
devtools::install_github('cardiomoon/moonBook2')
library(kormaps2014)
library(dplyr)
str(changeCode(korpop1))
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동
)
str(changeCode(korpop1))
ggChoropleth(data = korpop1,
aes(fill = pop,
map_id = code,
tooltip = name),
map = kormap1,
interactive = T)
library(kormaps2014)
library(dplyr)
str(changeCode(korpop1))
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동
)
str(changeCode(korpop1))
ggChoropleth(data = korpop1,
aes(fill = pop,
map_id = code,
tooltip = name),
map = kormap1,
interactive = T)
library(moonBook2)
str(changeCode(korpop1))
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동
)
str(changeCode(korpop1))
ggChoropleth(data = korpop1,
aes(fill = pop,
map_id = code,
tooltip = name),
map = kormap1,
interactive = T)
str(changeCode(korpop1))
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동
)
str(changeCode(korpop1))
ggChoropleth(data = korpop1,
aes(fill = pop,
map_id = code,
tooltip = name),
map = kormap1,
interactive = T)
library(ggplot2)
theme_set(theme_gray(base_family="NanumGothic"))
ggplot(korpop1,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap1,colour="black",size=0.1)+
expand_limits(x=kormap1$long,y=kormap1$lat)+
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()
library(kormaps2014)
library(dplyr)
library(moonBook2)
str(changeCode(korpop1))
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동
)
str(changeCode(korpop1))
library(ggplot2)
theme_set(theme_gray(base_family="NanumGothic"))
ggplot(korpop1,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap1,colour="black",size=0.1)+
expand_limits(x=kormap1$long,y=kormap1$lat)+
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()
library(moonBook2)
str(changeCode(korpop1))
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동
)
str(changeCode(korpop1))
library(ggplot2)
theme_set(theme_gray(base_family="NanumGothic"))
ggplot(korpop1,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap1,colour="black",size=0.1)+
expand_limits(x=korpop1$long,y=korpop1$lat)+
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()
kormap1$lat
kormap1
korpop1
str(kormap1)
library(moonBook2)
str(changeCode(korpop1))
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동
)
str(changeCode(korpop1))
kormap1 <- str(kormap1)
library(ggplot2)
theme_set(theme_gray(base_family="NanumGothic"))
ggplot(korpop1,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap1,colour="black",size=0.1)+
expand_limits(x=kormap1$long,y=kormap1$lat)+
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()
kormap1
kormap1
kormap1 <- str(kormap1)
kormap1
str(changeCode(korpop1))
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동
)
str(changeCode(korpop1))
kormap1 <- str(kormap1)
library(ggplot2)
theme_set(theme_gray(base_family="NanumGothic"))
ggplot(korpop1,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap1,colour="black",size=0.1)+
expand_limits(x=kormap1$long,y=kormap1$lat)+
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()
library(kormaps2014)
library(dplyr)
library(moonBook2)
str(changeCode(korpop1))
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동
)
str(changeCode(korpop1))
kormap1 <- str(kormap1)
library(ggplot2)
theme_set(theme_gray(base_family="NanumGothic"))
ggplot(korpop1,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap1,colour="black",size=0.1)+
expand_limits(x=kormap1$long,y=kormap1$lat)+
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()
library(kormaps2014)
library(dplyr)
library(moonBook2)
str(changeCode(korpop1))
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동
)
str(changeCode(korpop1))
kormap1 <- str(kormap1)
library(ggplot2)
theme_set(theme_gray(base_family="NanumGothic"))
ggplot(korpop1,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap1,colour="black",size=0.1)+
expand_limits(x=kormap1$long,y=kormap1$lat)+
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()
kormap1
str(kormap1)
kormap1
theme_set(theme_gray(base_family="NanumGothic"))
ggplot(korpop1,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap1,colour="black",size=0.1)+
expand_limits(x=kormap1$long,y=kormap1$lat)+
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()
library(ggiraphExtra)
library(kormaps2014)
library(dplyr)
library(ggplot2)
korpop1<-rename(korpop1, pop=총인구_명, name=행정구역별_읍면동)
# 인코딩을 CP949로 바꿈
str(changeCode(korpop1))
str(changeCode(kormap1))
options(encoding="UTF-8")
ggChoropleth(data=korpop1, aes(fill=pop,
map_id=code,
tooltip=name),
map=kormap1, interactive=T)
source('C:/rproject/day07/r4.R', encoding = 'UTF-8', echo=TRUE)
library(ggiraphExtra)
library(kormaps2014)
library(dplyr)
library(ggplot2)
korpop1<-rename(korpop1, pop=총인구_명, name=행정구역별_읍면동)
# 인코딩을 CP949로 바꿈
str(changeCode(korpop1))
str(changeCode(kormap1))
options(encoding="UTF-8")
ggChoropleth(data=korpop1, aes(fill=pop,
map_id=code,
tooltip=name),
map=kormap1, interactive=T)
library(ggiraphExtra)
library(kormaps2014)
library(dplyr)
library(ggplot2)
korpop1<-rename(korpop1, pop=총인구_명, name=행정구역별_읍면동)
# 인코딩을 CP949로 바꿈
str(changeCode(korpop1))
str(changeCode(kormap1))
options(encoding="UTF-8")
ggChoropleth(data=korpop1, aes(fill=pop,
map_id=code,
tooltip=name),
map=kormap1, interactive=T)
